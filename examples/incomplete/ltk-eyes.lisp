(defpackage #:iup-example.ltk-eyes
  (:use #:common-lisp))

(in-package #:iup-example.ltk-eyes)

(defvar *canvas* nil)

(defun canvas-map (handle)
  (setf *canvas* (cd:create-canvas (iup-cd:context-iup-dbuffer) handle))
  iup:+default+)

(defun canvas-unmap (handle)
  (declare (ignore handle))
  (when *canvas*
    (cd:kill *canvas*)
    (setf *canvas* nil))
  iup:+default+)

(defun canvas-redraw (handle x y)
  (declare (ignore handle x y))
  (draw *canvas*)
  iup:+default+)

(defun draw (canvas)
  ;; (let ((dx (* 50 (sin *angle2*)))
  ;; 	(dy (* 50 (cos *angle2*)))
  ;; 	(wx (sin *angle3*)))
  ;;   (cd:activate canvas)
  ;;   (cd:clear canvas)
  ;;   (setf (cd:foreground canvas) cd:+black+)
  ;;   (incf *angle* 0.1f0)
  ;;   (incf *angle2* 0.03f0)
  ;;   (incf *angle3* 0.01f0)
  ;;   (cd:with-vertices (canvas :path-mode-open-lines)
  ;;     (dotimes (i 100)
  ;; 	(let* ((w (+ *angle* (* i 2.8001f0)))
  ;; 	       (x (+ dx 250 (* 150 (sin w) wx)))
  ;; 	       (y (+ dy 200 (* 150 (cos w)))))
  ;; 	  (cd:vertex canvas x y)))))
  (cd:activate canvas)
  (setf (cd:foreground canvas) cd:+black+
	(cd:background canvas) cd:+white+
	(cd:line-width canvas) 10)
  (cd:clear canvas)
  (multiple-value-bind (w h)
      (cd:size canvas)
    (let* ((xc1 (* w 1/4))
	   (yc1 (* h 1/2))
	   (w1 (* w 1/3))
	   (h1 (* h 2/3))
	   (xc2 (* w 3/4))
	   (yc2 yc1)
	   (w2 w1)
	   (h2 h1)
	   (a1 0)
	   (a2 360))
      (cd:arc canvas xc1 yc1 w1 h1 a1 a2)
      (cd:arc canvas xc2 yc2 w2 h2 a1 a2)
      (cd:sector canvas xc1 yc1 (* w1 1/4) (* h1 1/4) 0 360)
      (cd:sector canvas xc2 yc2 (* w1 1/4) (* h1 1/4) 0 360)))
  (cd:flush canvas)
  iup:+default+)

(defun ltk-eyes ()
  (iup:with-iup ()
    (let* ((canvas (iup:canvas :map_cb 'canvas-map
			       :unmap_cb 'canvas-unmap
			       :action 'canvas-redraw))
	   (dialog (iup:dialog canvas :title "IUP LTK Eyes"
				      :size "500x320")))
      (iup:show-xy dialog iup:+center+ iup:+center+)
      (iup:main-loop))))

(defun ltk-eyes ()
  (with-ltk ()
   (let* ((*debug-tk* nil)
	  (w (screen-width))
	  (h (screen-height))
	  (c (make-instance 'canvas :width 400 :height 300))
	  (e1 (create-oval c 10 10 190 290))
	  (e2 (create-oval c 210 10 390 290))
	  (p1 (create-oval c 10 10 40 40))
	  (p2 (create-oval c 10 10 40 40))
	  (old-x 0)
	  (old-y 0))
     (setf *debug-tk* nil)
     (labels ((update ()
		      (multiple-value-bind (pos-x pos-y) (screen-mouse)
			(let* ((wx (window-x *tk*))
			       (wy (window-y *tk*))
			       (width (window-width *tk*))
			       (height (window-height *tk*))
			       (mx pos-x)
			       (my pos-y)
			       (x (truncate (* width (/ mx w))))
			       (y (truncate (* height (/ my h))))
			       (diam (truncate width 8))
			       (dx1 (- mx (+ wx (truncate width 4))))
			       (dy1 (- my (+ wy (truncate height 2))))
			       (dx2 (- mx (+ wx (* 3 (truncate width 4)))))
			       (dy2 (- my (+ wy (truncate height 2))))
			       (p1x (+ (- (truncate width 4)  (truncate diam 2)) (truncate (* width  dx1) (* 4.5 w))))
			       (p1y (+ (- (truncate height 2) (truncate diam 2)) (truncate (* height dy1) (* 2.3 h))))
			       (p2x (+ (- (* 3 (truncate width 4))  (truncate diam 2)) (truncate (*  width  dx2) (* 4.5 w))))
			       (p2y (+ (- (truncate height 2) (truncate diam 2)) (truncate (* height dy2) (* 2.3 h))))
			       
			       )
			  (setf *debug-tk* nil)
			  (unless (and (= x old-x)
				       (= y old-y))
			    (set-coords c e1 (list 10 10 (- (truncate width 2) 10) (- height 10)))
			    (set-coords c e2 (list (+ (truncate width 2) 10) 10  (- width 10) (- height 10)))
			    (set-coords c p1 (list p1x p1y (+ diam p1x) (+ diam p1y)))
			    (set-coords c p2 (list p2x p2y (+ diam p2x) (+ diam p2y)))
			    (setf old-x x
				  old-y y))
			  ))
	 	        (after 100 #'update)))
     (pack c :expand 1 :fill :both)
     (itemconfigure c e1 "width" 10)
     (itemconfigure c e2 "width" 10)
     (itemconfigure c p1 "fill" "blue")
     (itemconfigure c p2 "fill" "blue")
     (after 100 #'update)
     ))))

#-sbcl (ltk-eyes)

#+sbcl
(sb-int:with-float-traps-masked
    (:divide-by-zero :invalid)
  (ltk-eyes))
